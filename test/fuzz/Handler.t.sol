//SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

import {Test, console} from "forge-std/Test.sol";
import {DSCEngine} from "../../src/DSCEngine.sol";
import {DecentralizedStableCoin} from "../../src/DecentralizedStableCoin.sol";
import {ERC20Mock} from "@openzeppelin/contracts/mocks/token/ERC20Mock.sol";

contract Handler is Test {
    DSCEngine public s_dscEngine;
    DecentralizedStableCoin public s_dsc;
    address public weth;
    address public wbtc;
    uint256 MAX_DEPOSIT_SIZE = type(uint96).max;

    constructor(DSCEngine dscEngine, DecentralizedStableCoin dsc) {
        s_dscEngine = dscEngine;
        s_dsc = dsc;
        address[] memory collateralTokens = s_dscEngine.getCollateralTokens();
        weth = collateralTokens[0];
        wbtc = collateralTokens[1];
    }

    function depositCollateral(uint256 collateralSeed, uint256 amountCollateral) public {
        address collateralAddress = _getCollateralFromSeed(collateralSeed);
        amountCollateral = bound(amountCollateral, 1, MAX_DEPOSIT_SIZE);
        // Ensure amountCollateral is not excessively large for practical testing if needed,
        // or rely on DSCEngine's own checks.
        // For fuzzing, we might want to cap it or let DSCEngine handle invalid amounts.
        // For now, let's assume amountCollateral is a reasonable value generated by the fuzzer.

        // If amountCollateral is 0, DSCEngine's moreThanZero modifier will catch it.
        // We only need to mint and approve if amountCollateral > 0.
        vm.startPrank(msg.sender);
        ERC20Mock(collateralAddress).mint(msg.sender, amountCollateral);
        ERC20Mock(collateralAddress).approve(address(s_dscEngine), amountCollateral);
        s_dscEngine.depositCollateral(collateralAddress, amountCollateral);
        vm.stopPrank();
    }

    function _getCollateralFromSeed(uint256 collateralSeed) private view returns (address) {
        if (collateralSeed % 2 == 0) {
            return weth;
        }
        return wbtc;
    }
}
